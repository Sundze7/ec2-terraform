name: Provision EC2 and Deploy Next.js App

# on:
#   workflow_dispatch:

on:
  push:
    branches:
      - master

jobs:
  trigger_workflow:
    name: Provision EC2 and Deploy Application
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Terraform Repository
      # - name: Checkout Terraform Repository
      #   uses: actions/checkout@v3

      # # - name: Inject GitHub Runner Token into User Data
      # #   id: inject-token
      # #   run: |
      # #     sed -i "s/{{GH_RUNNER_TOKEN}}/${{ secrets.GH_RUNNER_TOKEN }}/g" install.sh

      # # Step 2: Setup Terraform
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 1.6.0

      # # Initialize Terraform
      # - name: Terraform Init
      #   working-directory: terraform/
      #   run: terraform init

      # # Apply Terraform
      # - name: Terraform Apply
      #   working-directory: terraform/
      #   run: terraform apply -auto-approve
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Checkout Front-End Repo
        uses: actions/checkout@v3
        with:
          repository: stellatech-ca/marketup 
          token: ${{secrets.GH_PAT}}
          ref: feat/biz-overview

      
      - name: Install Node.js Dependencies
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm ci


      # Step 3: Install dependencies
      - name: Install Dependencies
        run: npm ci

      # Step 4: Start SonarQube
      - name: Start SonarQube
        run: |
          docker run -d --name sonarqube \
          -p 9000:9000 \
          -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true \
          sonarqube:lts
        env:
          DOCKER_BUILDKIT: 1

      # Step 5: Wait for SonarQube to be ready
      - name: Wait for SonarQube to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:9000/api/system/health | grep -q '"health":"GREEN"'; then
              echo "SonarQube is ready";
              break;
            fi;
            echo "Waiting for SonarQube...";
            sleep 10;
          done

      # Step 6: Run SonarScanner
      - name: Run SonarScanner
        env:
          SONAR_HOST_URL: http://localhost:9000
          SONAR_TOKEN: admin # default SonarQube admin token; replace if needed
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=your_project_key \
            -Dsonar.sources=. \
            -Dsonar.exclusions=**/node_modules/**,**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.typescript.tsconfigPath=tsconfig.json \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.host.url=$SONAR_HOST_URL

      # Step 7: Retrieve and Save SonarQube Report
      - name: Fetch SonarQube Analysis Report
        env:
          SONAR_HOST_URL: http://localhost:9000
          SONAR_TOKEN: admin # default SonarQube admin token; replace if needed
        run: |
          PROJECT_KEY="your_project_key"
          ANALYSIS_ID=$(curl -s -u admin:admin "$SONAR_HOST_URL/api/project_analyses/search?project=$PROJECT_KEY" | jq -r '.analyses[0].key')
          if [ -z "$ANALYSIS_ID" ]; then
            echo "No analysis found for the project."
            exit 1
          fi
          REPORT=$(curl -s -u admin:admin "$SONAR_HOST_URL/api/issues/search?componentKeys=$PROJECT_KEY")
          echo "$REPORT" > sonarqube-report.json
        shell: bash

      # Step 8: Upload Analysis Report as an Artifact
      - name: Upload SonarQube Report
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-report
          path: sonarqube-report.json
          retention-days: 30

      # Step 9: Stop SonarQube
      - name: Stop SonarQube
        run: |
          docker stop sonarqube
          docker rm sonarqube

      
      # # REPO SCAN WITH TRIVY
      # - name: Run Trivy vulnerability scanner in filesystem mode
      #   uses: aquasecurity/trivy-action@0.28.0
      #   with:
      #     scan-type: 'fs' # Filesystem scan
      #     scan-ref: '.'
      #     trivy-config: trivy.yaml
      #     hide-progress: false
      #     format: 'sarif'
      #     output: 'trivy-results.sarif'
      #     exit-code: '0' # Don't fail the pipeline automatically
      #     ignore-unfixed: true

      # - name: Generate Trivy Vulnerability Report
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: "fs"
      #     output: trivy-repo-scan-report.json
      #     format: json
      #     scan-ref: .
      #     exit-code: 0

      # - name: Upload Vulnerability Scan Results
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: trivy-repo-scan-report
      #     path: trivy-repo-scan-report.json
      #     retention-days: 30

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-2

      # - name: Log in to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
      
      # # BUILD & TAG DOCKER IMAGE

      # - name: Build Docker Image # v1 - image tag
      #   run: |
      #     docker build -t market-web:v1 .

      # - name: Tag Docker Image
      #   run: |
      #     docker tag market-web:v1 ${{ secrets.ECR_REGISTRY_URL }}/market-web:v1

      # - name: Push Docker Image to ECR
      #   run: |
      #     docker push ${{ secrets.ECR_REGISTRY_URL }}/market-web:v1
      

      # # DOCKER IMAGE SCAN WITH TRIVY
      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@0.28.0
      #   with:
      #     image-ref: '148761669209.dkr.ecr.us-east-2.amazonaws.com/market-web:v1'
      #     format: 'json'
      #     output: 'trivy-image-scan-results.json'
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_DEFAULT_REGION: us-east-2
      

      # # UPLOAD SCANNED RESULT
      # - name: Upload Vulnerability Scan Results
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: trivy-image-scan-results
      #     path: trivy-image-scan-results.json
      #     retention-days: 30

                

     
  